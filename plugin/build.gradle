/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Gradle plugin project to get you started.
 * For more details take a look at the Writing Custom Plugins chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.2/userguide/custom_plugins.html
 */

plugins {
    // Apply the Java Gradle plugin development plugin to add support for developing Gradle plugins
    id 'java-gradle-plugin'

    // Apply the Kotlin JVM plugin to add support for Kotlin.
    id 'org.jetbrains.kotlin.jvm' version '1.5.0'

    
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Align versions of all Kotlin components
    implementation platform('org.jetbrains.kotlin:kotlin-bom')

    // Use the Kotlin JDK 8 standard library.
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'

    // Use the Kotlin test library.
    testImplementation 'org.jetbrains.kotlin:kotlin-test'

    api("org.junit.jupiter:junit-jupiter-api:5.0.0")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.2.0")
    // Use the Kotlin JUnit integration.
   // testImplementation 'org.jetbrains.kotlin:kotlin-test-junit'
    
    implementation("com.amazonaws:aws-java-sdk-sqs:1.11.519")
    implementation("org.elasticmq:elasticmq-rest-sqs_2.12:0.14.6")
    testImplementation("io.kotlintest:kotlintest-runner-junit5:3.3.1")
}

gradlePlugin {
    // Define the plugin
    plugins {
        greeting {
            id = 'com.svb.aws.codedeploy.plugin.deploy'
            implementationClass = 'com.svb.aws.codedeploy.plugin.AwsCodedeployPlugin'
        }
    }
}

// Add a source set for the functional test suite
sourceSets {
    functionalTest {
    }
}

gradlePlugin.testSourceSets(sourceSets.functionalTest)
configurations.functionalTestImplementation.extendsFrom(configurations.testImplementation)

// Add a task to run the functional tests
tasks.register('functionalTest', Test) {
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
}

tasks.named('check') {
    // Run the functional tests as part of `check`
    dependsOn(tasks.functionalTest)
}


test {
    useJUnitPlatform()
}